import heapq

def calcular_ruta(mapa, inicio, fin):
    cola = [(0, inicio)]
    visitados = set()
    distancia = {inicio: 0}
    ruta = {}

    while cola:
        (dist, actual) = heapq.heappop(cola)
        if actual not in visitados:
            visitados.add(actual)

            for vecino, coste in mapa[actual].items():
                old_cost = distancia.get(vecino, float('inf'))
                new_cost = dist + coste
                if new_cost < old_cost:
                    heapq.heappush(cola, (new_cost, vecino))
                    ruta[vecino] = actual
                    distancia[vecino] = new_cost

    camino = []
    while fin:
        camino.append(fin)
        fin = ruta.get(fin)

    return distancia, camino[::-1]

def main():
    mapa = {
        'Engativa': {'Suba': 7, 'Usme': 10},
        'Suba': {'Engativa': 7, 'Usme': 15, 'Fontibon': 12},
        'Usme': {'Engativa': 10, 'Suba': 15, 'Sumapaz': 10},
        'Fontibon': {'Suba': 12, 'Sumapaz': 1},
        'Sumapaz': {'Usme': 10, 'Fontibon': 1}
    }

    while True:
        print("localidades disponibles: Engativa, Suba, Usme, Fontibon, Sumapaz")
        inicio = input("Por favor, ingrese la localidad de inicio: ")
        fin = input("Por favor, ingrese la localidad de destino: ")

        if inicio not in mapa or fin not in mapa:
            print("Una o ambas localidades no están en la lista. Por favor, inténtelo de nuevo.")
            continue

        distancia, ruta = calcular_ruta(mapa, inicio, fin)

        print(f"La distancia más corta es: {distancia[fin]} km")
        print(f"La ruta más corta es: {' -> '.join(ruta)}")

        otra_ruta = input("¿Desea calcular otra ruta? (s/n): ")
        if otra_ruta.lower() != 's':
            break

if __name__ == "__main__":
    main()
